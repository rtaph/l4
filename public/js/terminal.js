// Generated by CoffeeScript 1.6.3
(function() {
  var Bucket, Node, Terminal,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  String.prototype.paddingLeft = function(paddingValue) {
    return String(paddingValue + this).slice(-paddingValue.length);
  };

  Node = (function() {
    function Node(prop, name) {
      this.prop = prop;
      this.name = name != null ? name : false;
      this._isDir = true;
      if (typeof this.prop === 'string') {
        this.name = this.prop;
        return true;
      }
      if (typeof this.prop === 'object' && ((this.prop.info != null) || (this.prop.desc != null))) {
        this._isDir = false;
        if (this.name === false) {
          if (this.prop.title != null) {
            this.name = this.prop.title;
          }
          if (this.prop.name != null) {
            this.name = this.prop.name;
          }
          if (this.prop.file != null) {
            this.name = this.prop.file;
          }
        }
        return true;
      }
    }

    Node.prototype.isDir = function() {
      return this._isDir;
    };

    Node.prototype.info = function() {
      return this.prop;
    };

    Node.prototype.echo = function() {
      if (this.isDir()) {
        return "[[;#e67e22;#000]d]r-xr-xr-x\t[[b;#2ecc71;#000]kurei\tstaff]\t\t" + this.name.length.toString().paddingLeft("      ") + "\t[[;#e67e22;#000]" + this.name + "]";
      }
      return "[[;#e67e22;#]-r-xr-xr-x]\t[[b;#2ecc71;#000]kurei\tstaff]\t\t" + this.name.length.toString().paddingLeft("      ") + "\t[[;#b94a48;#000]" + this.name + "]";
    };

    Node.prototype.content = function() {
      var key, value, _ref, _results;
      if (this.isDir()) {
        return false;
      }
      _ref = this.prop;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(key === 'info' || key === 'desc' ? value : void 0);
      }
      return _results;
    };

    return Node;

  })();

  Bucket = (function() {
    function Bucket(json) {
      this.bucket = $.parseJSON(json);
      this.stack = ['/', 'home', 'kurei'];
      this.home = '/home/kurei';
      this.wd = '/home/kurei';
    }

    Bucket.prototype.normalize = function(path) {
      return path.split("/").reduce(function(o, x) {
        return o[x];
      }, obj);
    };

    Bucket.prototype.pluck = function(path) {
      var i, l, norm_path, _i, _len;
      norm_path = [];
      path = path.split('/');
      l = path.length;
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        i = path[_i];
        if (i !== '') {
          norm_path.push(i);
        }
      }
      return $.merge(['/'], norm_path).reduce(function(o, x) {
        if (typeof o === 'undefined') {
          return false;
        }
        return o[x];
      }, this.bucket);
    };

    Bucket.prototype.cd = function(path) {
      var current_dir, current_stack, i, _i, _len;
      path = path.trim(' ');
      if (path === '') {
        return true;
      }
      if (path === '/') {
        this.stack = ['/'];
        this.wd = '/';
        return true;
      }
      if (path === '~') {
        this.stack = ['/', 'home', 'kurei'];
        this.wd = '/home/kurei';
        return true;
      }
      current_dir = this.wd;
      current_stack = this.stack;
      if (path.charAt(0) === '/') {
        this.stack = ['/'];
        this.wd = '/';
      }
      if (path.charAt(0) === '~') {
        path = path.replace('~', this.home);
      }
      path = path.split('/');
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        i = path[_i];
        switch (i) {
          case '':
          case '.':
          case '/':
            continue;
          case '..':
            this.stack.pop();
            break;
          default:
            this.stack.push(i);
        }
      }
      if (this.stack[0] === '/') {
        this.wd = '/' + this.stack.slice(1).join('/');
      } else {
        this.wd = '/' + this.stack.join('/');
      }
      if (typeof this.pluck(this.wd) === 'undefined' || this.pluck(this.wd) === false) {
        this.wd = current_dir;
        this.stack = current_stack;
        return "Invalid folder";
      }
      return true;
    };

    Bucket.prototype.ls = function(path) {
      var dir, i, item, ls, prop, _i, _len;
      if (typeof path === 'undefined' || path === '') {
        path = this.wd;
      }
      if (['/', '.', '..'].indexOf(path.charAt(0)) < 0) {
        path = [this.wd, path].join('/');
      }
      item = this.pluck(path);
      ls = [];
      if ($.isArray(item)) {
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          i = item[_i];
          ls.push(new Node(i));
        }
        return ls;
      }
      if (((item.name != null) || (item.title != null)) && ((item.info != null) || (item.desc != null))) {
        return [new Node(item)];
      }
      for (dir in item) {
        prop = item[dir];
        ls.push(new Node(prop, dir));
      }
      return ls;
    };

    Bucket.prototype.pwd = function() {
      if (this.wd === this.home) {
        return '~';
      } else {
        return this.wd;
      }
    };

    return Bucket;

  })();

  Terminal = (function() {
    var _this = this;

    function Terminal(bucket, option) {
      var t,
        _this = this;
      this.bucket = bucket;
      this.parse_command = __bind(this.parse_command, this);
      t = this;
      $('.terminalme').terminal(function(input, term) {
        var e, result, _cmd;
        if (input.trim() === '') {
          input = 'help';
        }
        if (input == null) {
          input = 'help';
        }
        _cmd = t.parse_command(input);
        try {
          result = t.sh[_cmd.c].call(t, term, _cmd.o);
          if (result !== true) {
            return term.error(new String(result));
          }
          return true;
        } catch (_error) {
          e = _error;
          term.error(new String(e));
        }
        return true;
      }, $.extend(option, {
        prompt: function(p) {
          return p(['[kurei@axcoto.com]', t.bucket.pwd(), 'âžœ '].join(' '));
        }
      }));
    }

    Terminal.prototype.parse_command = function(input) {
      var s;
      if (input === '') {
        return {
          c: 'help',
          o: false
        };
      }
      s = input.replace(/\s+/, ' ').split(' ');
      if (typeof this.sh[s[0]] === 'undefined') {
        return {
          c: 'not_found',
          o: s
        };
      }
      if (s.length === 1) {
        return {
          c: s[0],
          o: false
        };
      }
      return {
        c: s[0],
        o: s.splice(1)
      };
    };

    Terminal.prototype.sh = {
      not_found: function(term, opt) {
        term.error("Command " + opt[0] + ' not found. Try help to see available commands.');
        return true;
      },
      cd: function(term, opt) {
        var $result;
        if (typeof opt[0] === 'undefined' && opt[0] === '') {
          return true;
        }
        if (true === ($result = this.bucket.cd(opt[0]))) {
          term.echo("You are in : " + this.bucket.pwd());
          return true;
        } else {
          return $result;
        }
      },
      whoami: function(term, opt) {
        term.echo("kurei");
        return true;
      },
      find: function(term, opt) {
        if (opt === false) {
          return "find search_term";
        }
        term.echo("Google in a new tab :-) " + opt.join(' '));
        return true;
      },
      whereami: function(term, opt) {
        term.echo("Your Ip: ");
        return true;
      },
      help: function(term, opt) {
        var c, commands;
        commands = [];
        for (c in this.sh) {
          if (c !== 'not_found') {
            commands.push("[[b;#fff;#f89406;] " + c + " ]");
          }
        }
        term.echo("Available commands:\n\t" + commands.join(', '));
        return true;
      },
      ls: function(term, opt) {
        var ls, node, _i, _len;
        ls = this.bucket.ls(opt[0]);
        for (_i = 0, _len = ls.length; _i < _len; _i++) {
          node = ls[_i];
          term.echo(node.echo());
        }
        return true;
      },
      pwd: function(term, opt) {
        term.echo("\t" + this.bucket.pwd());
        return true;
      },
      cat: function(term, opt) {
        var ls;
        if (opt.length === 0) {
          return "Missing file name";
        }
        ls = this.bucket.ls(opt.join('').trim());
        if ((ls == null) || ls.length === 0) {
          return "File not found";
        }
        if (ls.length === 1 && ls[0] instanceof Node) {
          ls = ls[0];
          term.echo("[[b;#faff6b;#000]" + ls.content() + "]");
          return true;
        }
        return [opt[0], "is a directory"].join(' ');
      },
      curl: function(term, opt) {
        var k, _i, _len, _ref;
        _ref = this.bucket;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          term.echo(k);
        }
        return true;
      },
      contact: function(term, opt) {
        term.echo("echo 'Message body' | mail -s 'Subject' ");
        return true;
      }
    };

    return Terminal;

  }).call(this);

  (function($) {
    var bucket;
    bucket = new Bucket($('#bucket').text());
    if (typeof this.bucket !== 'object') {
      bucket = {
        shop: [],
        products: [],
        lab: [],
        work: []
      };
    }
    return new Terminal(bucket, {
      greetings: "[[;#2ecc71;#000]Welcome, let type `help` to get around.]\nMake sure to check out file system wtih `ls /` too ;)    \n     .--.                   .-.      \n: .; :                 .' `.     \n:    :.-.,-. .--.  .--.`. .'.--. \n: :: :`.  .''  ..'' .; :: :' .; :\n:_;:_;:_,._;`.__.'`.__.':_;`.__.'\n                                       ",
      name: 'kurei',
      height: 600
    });
  })(jQuery);

}).call(this);
